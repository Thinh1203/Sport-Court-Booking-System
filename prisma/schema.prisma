generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          
  password      String
  phoneNumber   String?
  fullName      String
  role          Role            @default(USER)
  avatar        String?
  background    String?
  avatarCloudinaryId String?
  backgroundCloudinaryId String?
  isBlocked     Boolean?        @default(false)
  googleId      String?
  facebookId    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  socialAccount SocialAccount[]
  booking Booking[]
  comments Comment[]
}

model SocialAccount {
  id           Int    @id @default(autoincrement())
  provider     String
  name         String
  email        String
  accessToken  String
  refreshToken String
  providerId   String
  userId       Int?
  user         User?  @relation(fields: [userId], references: [id])
}
model Headquarters {
  id           Int    @id @default(autoincrement())
  name String
  description String
  imageUrl String
  imageCloudinaryId String
  theSportsCenter TheSportsCenter[]
}

model TheSportsCenter {
  id           Int    @id @default(autoincrement())
  name         String 
  address       String
  status        Boolean         @default(true)
  view          Int          @default(0)
  isDeleted     Boolean @default(false)
  latitude      Float
  longtitude    Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  theSportsCenterImages TheSportsCenterImages[]
  openingHour   OpeningHour[] 
  theSportCenterCourt Court[]
  headquartersId Int?
  headquarters Headquarters? @relation(fields: [headquartersId], references: [id])
}

model TheSportsCenterImages {
  id           Int    @id @default(autoincrement())
  imageUrl     String
  sportsCenterCloudinaryId String
  theSportsCenterId Int
  theSportsCenter TheSportsCenter @relation(fields: [theSportsCenterId], references: [id])
}

model Comment {
  id           Int    @id @default(autoincrement())
  star  Int 
  text  String?
  imageUrl String?
  commentImageCloudinaryId String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId Int
  user  User  @relation(fields: [userId], references: [id])
  courtId Int
  court Court @relation(fields: [courtId], references: [id])

}

model OpeningHour {
  id           Int    @id @default(autoincrement())
  dayOfWeek    Int       
  openingTime  String
  closingTime  String
  sportsCenterId Int
  sportsCenter TheSportsCenter @relation(fields: [sportsCenterId], references: [id])
}

model Category {
  id           Int    @id @default(autoincrement())
  type    String
  description String
  imageUrl String
  categoryCloudinaryId String
  isDeleted Boolean @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categoryCourt Court[]
}

model Court {
  id           Int    @id @default(autoincrement())
  name String
  price Float
  discount Float    @default(0)
  isDeleted Boolean @default(false)
  imageUrl  String
  time      Int
  courtCloudinaryId String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  sportsCenterId  Int
  isVip   Boolean @default(false)
  sportsCenter TheSportsCenter @relation(fields: [sportsCenterId], references: [id])
  categoryId  Int
  category Category @relation(fields: [categoryId], references: [id])
  amenities Amentity[]
  attributes  Json?
  flagTime  Int?
  maximumTime Int?
  booking Booking[]
  comments  Comment[]
}

model Amentity {
  id           Int    @id @default(autoincrement())
  name  String
  description  String
  imageUrl  String
  amentityCloudinaryId  String 
  courts  Court[]
}

model Booking {
  id           Int    @id @default(autoincrement())
  startDate DateTime
  startTime  DateTime
  timeBooking Int
  statusBooking String
  fullName  String
  phoneNumber String
  email String
  paymentMethod String
  paymentStatus Boolean
  totalPrice  Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  courtId Int
  court Court @relation(fields: [courtId], references: [id])
}
